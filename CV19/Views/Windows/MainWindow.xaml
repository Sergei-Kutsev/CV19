<Window x:Class="CV19.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" mc:Ignorable="d"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:fa="http://schemas.fontawesome.com/icons/"
        xmlns:cmd="clr-namespace:CV19.Infrastructure.Commands.Base"
        xmlns:vm="clr-namespace:CV19.ViewModels"
        xmlns:l="clr-namespace:CV19" xmlns:oxy="http://oxyplot.org/wpf"
        Title="{Binding Path=Title}" 
        Height="450" Width="800">
    <Window.InputBindings>
        <!--при нажатии на ctrl+Q срабатывает команда, которая закрывает окно-->
        <KeyBinding Modifiers="Ctrl" Key="Q" Command="{Binding CloseApplicationCommand}"/>
    </Window.InputBindings>

    <!--фигурные скобки показывают, что внутри будет находиться не обычное значение, а расширение разметки-->

    <Window.DataContext>
        <vm:MainWindowViewModel/>
    </Window.DataContext>
    <!--объявлем ресурс, указываем команду и ключ-->
    <Window.Resources>
        <cmd:CloseApplicationCommand x:Key="CloseApplicationCommand"/>
    </Window.Resources>

    <DockPanel>
        <Menu DockPanel.Dock="Top">
            <MenuItem Header="Файл">

                <!--привязываем к выходу команду и закрывается окно-->
                <!--<MenuItem Header="Выход" Command="{Binding CloseApplicationCommand}"/>-->

                <!--Команды есть смысл вынести в отдельные ресурсы. Создаем для этого словарь ресурсов и подключаем его ко всему приложению.-->
                <MenuItem Header="Выход" Command="{StaticResource CloseApplicationCommand}"/>


                <!--привязываем к выходу команду, которая является классом в репозитории CloseApplicationCommand, замедляет приложение-->
                <!--<MenuItem Header="Выход">
                    <MenuItem.Command>
                        <cmd:CloseApplicationCommand/>
                    </MenuItem.Command>
                </MenuItem>-->

            </MenuItem>
            <MenuItem Header="Помощь">
                <MenuItem Header="О программе"/>
            </MenuItem>
            <MenuItem Command="{Binding ChangeTabIndexCommand}" CommandParameter="-1">
                <MenuItem.Header>
                    <fa:ImageAwesome Height="12" Icon="Regular_ArrowAltCircleLeft"/>
                </MenuItem.Header>
            </MenuItem>

            <MenuItem Command="{Binding ChangeTabIndexCommand}" CommandParameter="+1">
                <MenuItem.Header>
                    <fa:ImageAwesome Height="12" Icon="Regular_ArrowAltCircleRight"/>
                </MenuItem.Header>
            </MenuItem>
            <!--<MenuItem Header="{Binding SelectedPageIndex}" IsEnabled="False"/>-->

        </Menu>

        <StatusBar DockPanel.Dock="Bottom">
            <StatusBarItem >
                <TextBlock Text="Готов!"  MaxWidth="300" MinWidth="150"/>
            </StatusBarItem>
            <StatusBarItem>
                <ProgressBar Width="120" Height="14" Value="30"/>
            </StatusBarItem>
            <StatusBarItem Content="{Binding SelectedPageIndex}" />
        </StatusBar>

        <!--TabControl это списочный элемент управления - просто список содержимого. TabItem это тоже самое, что и в -->
        <!--ListView позиция-->
        <TabControl SelectedIndex="{Binding SelectedPageIndex}">
            <TabItem Header="График">
                <oxy:Plot>
                    <oxy:Plot.Axes>
                        <oxy:LinearAxis Position="Left"/>
                        <oxy:LinearAxis Position="Bottom"/>
                    </oxy:Plot.Axes>
                    <oxy:LineSeries Color="Red"
                ItemsSource="{Binding TestDataPoints}"
                                    DataFieldX="XValue"
                                    DataFieldY="YValue"/>
                </oxy:Plot>
            </TabItem>

            <TabItem>
                <!--тип Header принимает тип object, значит его можно развернуть-->
                <TabItem.Header>
                    <StackPanel Orientation="Horizontal">

                        <!--подключаем пакет NuGet с шрифтами и иконками FontAwesome5, подключаем их вверху к окну и используем в разметке-->
                        <fa:ImageAwesome Icon="Regular_Angry" Height="13" Margin="0,0,5,0" Foreground="Red"/>
                        <TextBlock Text="Вкладка 1"/>
                    </StackPanel>
                </TabItem.Header>

                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="50*"/>
                        <RowDefinition Height="47*"/>
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="235*"/>
                        <ColumnDefinition Width="559*"/>
                    </Grid.ColumnDefinitions>
                    <Rectangle Grid.Column="0" Grid.Row="0" 
                               Fill="Blue" 
                               Stroke="Red" 
                               StrokeThickness="3" 
                               RadiusX="5" RadiusY="7"/>
                    <Ellipse Grid.Column="1" Grid.Row="0" 
                               Fill="Red" Stroke="Blue" StrokeThickness="3">
                        <Ellipse.InputBindings>
                            <!--привязываем команду к визуальному элементу, при нажатии на который, произойдет закрытие программы-->
                            <MouseBinding Command="{Binding CloseApplicationCommand}" 
                                          MouseAction="LeftDoubleClick"/>
                        </Ellipse.InputBindings>
                    </Ellipse>
                </Grid>
            </TabItem>
            <TabItem Header="Вкладка 2"></TabItem>
            <TabItem Header="Вкладка 3"></TabItem>
            <TabItem Header="Вкладка 4"></TabItem>
        </TabControl>

        <!--привязывем в Value Title и снова меняется название
        <Slider VerticalAlignment="Top" HorizontalAlignment="Left" Margin="30" Width="300" 
                Value="{Binding Title}"/>-->

        <!--привяжем к свойству текст Title и привяжем UpdateSourceTrigger, что будет менять сразу название заголовка прямо в коне-->
        <!--<TextBox Margin="404,63,276,314" 
                 Text="{Binding Title, UpdateSourceTrigger=PropertyChanged}" 
                 TextWrapping="Wrap" 
                 Width="120"/>-->

    </DockPanel>
</Window>
